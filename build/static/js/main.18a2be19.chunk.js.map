{"version":3,"sources":["helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","services/authentication-service.ts","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","types","map","key","POKEMONS","hp","cp","created","Date","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","AuthenticationService","username","password","isAuthenticated","setTimeout","PokemonList","useEffect","getPokemons","logout","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","isAddForm","isTypesValid","handleSubmit","preventDefault","newForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","checked","disabled","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.18a2be19.chunk.js","sourcesContent":["const formatType = (type: string): string => {\r\n    let color: string;\r\n   \r\n    switch (type) {\r\n      case 'Feu': \r\n        color = 'red lighten-1'; \r\n        break; \r\n      case 'Eau': \r\n        color = 'blue lighten-1'; \r\n        break; \r\n      case 'Plante': \r\n        color = 'green lighten-1'; \r\n        break; \r\n      case 'Insecte': \r\n        color = 'brown lighten-1'; \r\n        break; \r\n      case 'Normal': \r\n        color = 'grey lighten-3'; \r\n        break; \r\n      case 'Vol': \r\n        color = 'blue lighten-3'; \r\n        break; \r\n      case 'Poison': \r\n        color = 'deep-purple accent-1'; \r\n        break; \r\n      case 'Fée': \r\n        color = 'pink lighten-4'; \r\n        break; \r\n      case 'Psy': \r\n        color = 'deep-purple darken-2'; \r\n        break; \r\n      case 'Electrik': \r\n        color = 'lime accent-1'; \r\n        break; \r\n      case 'Combat': \r\n        color = 'deep-orange'; \r\n        break; \r\n      default: \r\n        color = 'grey'; \r\n        break; \r\n    }\r\n   \r\n    return `chip ${color}`;\r\n  }\r\n\r\n  export default formatType;","import React, {FunctionComponent, useState} from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    borderColor? : string\r\n  };\r\n    \r\n  const PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = \"#009688\"}) => {\r\n      \r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    } \r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5');\r\n    }\r\n\r\n    const goToPokemon = (id: number) => {\r\n        history.push(`/pokemons/${id}`)\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"col s6 m4\" onClick={ () => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n        <div className=\"card horizontal\" style= {{ borderColor: color }}>\r\n          <div className=\"card-image\"> \r\n            <img src={pokemon.picture} alt={pokemon.name}/>\r\n          </div>\r\n          <div className=\"card-stacked\">\r\n            <div className=\"card-content\">\r\n              <p>{pokemon.name}</p>\r\n    {/*<p><small>{formatDate(pokemon.created)}</small></p>*/}\r\n              {pokemon.types.map(type => (\r\n                  <span key={type} className={formatType(type)}>{type}</span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n    \r\n  export default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n  const [term, setTerm] = useState<string>('');\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const term = e.target.value;\r\n    setTerm(term);\r\n \r\n    if(term.length <= 1) {\r\n      setPokemons([]);\r\n      return;\r\n    }\r\n \r\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\"> \r\n    <div className=\"col s12 m6 offset-m3\"> \r\n      <div className=\"card\"> \r\n      <div className=\"card-content\"> \r\n        <div className=\"input-field\"> \r\n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n        </div> \r\n        <div className='collection'>\r\n        {pokemons.map((pokemon) => (\r\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n            {pokemon.name}\r\n          </Link>\r\n        ))}\r\n        </div> \r\n      </div> \r\n      </div> \r\n    </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonSearch;","export default class AuthenticationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    static logout(): Promise<boolean> {\r\n        const isAuthenticated = false;\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);\r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\n//import POKEMONS from '../models/mock-pokemon';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport {  RouteComponentProps, Link } from 'react-router-dom';\r\nimport PokemonSearch from '../components/pokemon-search';\r\nimport AuthenticationService from '../services/authentication-service';\r\nimport { useHistory } from 'react-router-dom';\r\n  \r\nconst PokemonList: FunctionComponent = () => {\r\n  const history = useHistory();\r\n  \r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    AuthenticationService.logout().then(() => history.push('/pokemons'));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <h1 className=\"center\">Pokédex</h1>\r\n      <span  className=\"btn btn-floating halfway-fab waves-effect waves-light red\">\r\n                  <i onClick={logout} className=\"material-icons\">exit_to_app</i>\r\n              </span>\r\n      <div className=\"container\"> \r\n        <div className=\"row\"> \r\n        <PokemonSearch></PokemonSearch>\r\n        {pokemons.map(pokemon => (\r\n          <PokemonCard key={pokemon.id} pokemon={pokemon} borderColor=\"red\"/>\r\n        ))}\r\n        </div>\r\n      </div>\r\n      <Link to={`/pokemons/add`} className=\"btn btn-floating halfway-fab waves-effect waves-light red z-depth-3\"\r\n      style={{position: 'fixed', bottom: '25px', right: '25px'}}>\r\n                  <i className=\"material-icons\">add</i>\r\n      </Link>\r\n    </div> \r\n  );\r\n}\r\n  \r\nexport default PokemonList;","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n  return (\r\n    <div className=\"preloader-wrapper big active\"> \r\n      <div className=\"spinner-layer spinner-blue\"> \r\n        <div className=\"circle-clipper left\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        <div className=\"gap-patch\"> \r\n          <div className=\"circle\"></div> \r\n        </div><div className=\"circle-clipper right\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n      </div> \r\n   </div> \r\n  );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\n//import POKEMONS from '../models/mock-pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n              <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i className=\"material-icons\">edit</i>\r\n              </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{/*formatDate(pokemon.created)*/}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonService from '../services/pokemon-service';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n  picture : Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n  \r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture},\r\n        name: { value: pokemon.name, isValid: true},\r\n        hp: { value: pokemon.hp, isValid: true},\r\n        cp: { value: pokemon.cp, isValid: true},\r\n        types: { value: pokemon.types, isValid: true}\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n\r\n  const hasType = (type: string): boolean => {\r\n      return form.types.value.includes(type);\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName] : { value: fieldValue }};\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const selectType =(type: string, e: React.ChangeEvent<HTMLInputElement>): void =>{\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if(checked)\r\n    {\r\n      //Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\r\n      const newTypes : string[] = form.types.value.concat([type]);\r\n      newField = {value: newTypes};\r\n      \r\n    }\r\n    else\r\n    {\r\n      //Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon\r\n      const newTypes : string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n      newField = {value: newTypes};\r\n    }\r\n\r\n    setForm({ ...form, ...{ types: newField}});\r\n  }\r\n   \r\n  const isAddForm = () => {\r\n    return !isEditForm;\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator url\r\n    if(isAddForm()) {\r\n\r\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n      const end = \".png\";\r\n\r\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n        const errorMsg: string = 'L\\'url n\\'est pas valide.';\r\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n        newForm = { ...newForm, ...{ picture: newField } };\r\n      } else {\r\n        const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n        newForm = { ...newForm, ...{ picture: newField } };\r\n      }\r\n    }\r\n\r\n    // Validator name\r\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    }\r\n\r\n    // Validator hp\r\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    }\r\n\r\n    // Validator cp\r\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n  }\r\n\r\n  const isTypesValid = (type: string): boolean => {\r\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n    if (form.types.value.length === 1 && hasType(type)) {\r\n      return false;\r\n    }\r\n    \r\n    // Cas n°1: Le pokémon a au moins 3 types.\r\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n    if (form.types.value.length >= 3 && !hasType(type)) { \r\n      return false; \r\n    } \r\n    \r\n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n    return true;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n\r\n    if(isFormValid)\r\n    {\r\n      pokemon.picture = form.picture.value;\r\n      pokemon.name = form.name.value;\r\n      pokemon.hp = form.hp.value;\r\n      pokemon.cp = form.cp.value;\r\n      pokemon.types = form.types.value;\r\n      \r\n      isEditForm ? updatePokemon() : addPokemon();\r\n    }\r\n    \r\n  }\r\n\r\n  const addPokemon = () => {\r\n    PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\r\n  }\r\n\r\n  const updatePokemon = () => {\r\n    PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n  }\r\n\r\n  const deletePokemon = () => {\r\n    PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\r\n  }\r\n  \r\n  return (\r\n    <form onSubmit={e => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n          {isEditForm && (\r\n            <div className=\"card-image\">\r\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n              <span  className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n              </span>\r\n            </div>\r\n            )}\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon picture */}\r\n                {isAddForm() && (\r\n                  <div className=\"form-group\">\r\n                  <label htmlFor=\"picture\">Nom</label>\r\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                  {form.picture.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.picture.error} \r\n                  </div>} \r\n                </div>\r\n                )}\r\n                \r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {form.name.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.name.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                    {/* error */}\r\n                  {form.hp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.hp.error}\r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                    {/* error */}\r\n                  {form.cp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.cp.error}\r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type, e)}></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n//import POKEMONS from '../models/mock-pokemon';\r\n \r\ntype Params = { id: string };\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created: Date;\r\n     \r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n     id: number,\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     name: string = '...',\r\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/xxx.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     // 3. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n}"," import React, {FunctionComponent, useState} from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\n import Pokemon from '../models/pokemon';\r\n\r\n const PokemonAdd: FunctionComponent = () => {\r\n     const [id] = useState<number>(new Date().getTime());\r\n     const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n\r\n     return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un Pokémon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n     );\r\n }\r\n\r\n export default PokemonAdd;","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    username: { value: '' },\r\n    password: { value: '' },\r\n  });\r\n\r\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator username\r\n    if(form.username.value.length < 3) {\r\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    }\r\n\r\n    // Validator password\r\n    if(form.password.value.length < 6) {\r\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n    return newForm.username.isValid && newForm.password.isValid;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      setMessage('👉 Tentative de connexion en cours ...');\r\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n        if(!isAuthenticated) {\r\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n          return;\r\n        }\r\n        \r\n        history.push('/pokemons');\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Form message */}\r\n                {message && <div className=\"form-group\">\r\n                  <div className=\"card-panel grey lighten-5\">\r\n                    {message}\r\n                  </div>\r\n                </div>}\r\n                {/* Field username */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Identifiant</label>\r\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.username.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.username.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Field password */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Mot de passe</label>\r\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.password.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.password.error} \r\n                  </div>} \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n  <Route {...rest} render={(props) => {\r\n    const isAuthenticated = AuthenticationService.isAuthenticated;\r\n    if (!isAuthenticated) {    \r\n      return <Redirect to={{ pathname: '/login' }} />\r\n    }\r\n  \r\n    return <Component {...props} />\r\n  }} />\r\n);\r\n  \r\nexport default PrivateRoute;","import React , { FunctionComponent } from 'react';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\r\nimport PokemonsDetail from './pages/pokemon-detail';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\nimport Login from './pages/login';\r\nimport PrivateRoute from './PrivateRoute';\r\n  \r\nconst App: FunctionComponent = () => {\r\n \r\n return (\r\n     <Router>\r\n         <div>\r\n         {/*barre de navigation*/}\r\n            <nav>\r\n                <div className=\"nav-wrapper teal\">\r\n                    <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                </div>\r\n            </nav>\r\n            {/*Système de gestion des routes */}\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n                <Route exact path=\"/login\" component={Login} />\r\n                <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n                <PrivateRoute exact path=\"/pokemons/add\" component={PokemonAdd} />\r\n                <PrivateRoute exact path=\"/pokemons/:id\" component={PokemonsDetail} />\r\n                <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                <Route component={PageNotFound} /> {/*Toujours en dernier */}\r\n            </Switch>\r\n         </div>\r\n         \r\n     </Router>\r\n     \r\n )\r\n}\r\n  \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}